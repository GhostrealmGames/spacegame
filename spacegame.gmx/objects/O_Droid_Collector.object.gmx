<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sp_Droid_Collector</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>O_Droid_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Inventory[2*total_resource_types] = 0;
mass = 50;
target = noone;
var nearest_untargeted_particle = noone, nearest_dist, current_dist;
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set the object to chase
if (locked_on == false &amp;&amp; collected_num &lt; 10 &amp;&amp; instance_exists(O_Particle_Parent))
{
    target = noone;
    // Search for closest untargeted particle
    with (O_Particle_Parent)
    {
        if (targeted == false)
        {
            other.current_dist = distance_to_object(other);
            if (other.target == noone || other.current_dist &lt; other.nearest_dist)
            {
                other.target = id;
                other.nearest_dist = other.current_dist;
            }
        }
    }
    
    if (target != noone)
    {
        target.targeted = true;
        locked_on = true;
    }
}
// Chase Target Object
if (collected_num &lt; 10 &amp;&amp; instance_exists(target))
{
    dist = point_distance(x, y, target.x, target.y);
    if (dist &gt; 0)
    {
        if (dist &lt; 45)
        {
            move_towards_point(target.x, target.y, accel_rate);
        }
        else
        {
            mp_potential_step(target.x, target.y, accel_rate, true);
        }
        spr_angle = point_direction(x, y, target.x, target.y);
        fire_speed += 0.1;
        accel = true;
    }
}
else
{
    if (instance_exists(O_Ship))
    {
        dist = point_distance(x, y, O_Ship.x, O_Ship.y);
        angle = point_direction(x, y, O_Ship.x, O_Ship.y);
        if (dist &gt; 200)
        {
            mp_potential_step(O_Ship.x, O_Ship.y, accel_rate, true);
            spr_angle = angle;
            fire_speed += 0.1;
            accel = true;
        }
        else if (dist &lt; 100)
        {
            mp_potential_step(O_Ship.x, O_Ship.y, -accel_rate, true);
            spr_angle = -angle;
            fire_speed += 0.1;
            accel = true;
        }
        else
        {
            if (collected_num &gt; 0)
            {
                if (O_Controller.inv_slots_full == false)
                {
                    collected_num = 0;
                    for (i = 0; i &lt; 2*total_resource_types; i += 1)
                    {
                        if (O_Controller.inv_full[i] == false)
                        {
                            global.Inventory[i] += Inventory[i];
                            Inventory[i] = 0;
                        }
                    }
                }
            }
            accel = false;
            speed = 0;
            spr_angle = angle;
        }
    }
    locked_on = false;
}
imagespeed += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collected_num &gt; 0)
{
    if (O_Controller.inv_full == false)
    {
        collected_num = 0;
        for (i = 0; i &lt; 2*total_resource_types; i += 1)
        {
            if (O_Controller.inv_full == false)
            {
                global.Inventory[i] += Inventory[i];
            }
        }
        global.Inventory[collector_droid + 2*total_resource_types] += 1;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (global.debug)
{
    draw_set_color(c_red);
    draw_text(x, y, "Locked on: " + string(locked_on) +
                    "#Collected: " + string(collected_num) +
                    "#Stone: " + string(Inventory[stone]));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
