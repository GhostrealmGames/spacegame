<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sp_ShipV1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//==================
//infinite map
mapx = 0;
mapy = 0;
//==================
spr_angle = 0;
image_speed = 0;
alarm[1] = 0;
Pressed = false;
shooting = false;
mass = 1000;        // normal = 1000;
collided = false;
force_gravity = 0;
explode = false;
dist_x = 0;
dist_y = 0;
dist = 0;
angle_planet = 0;
angle_object = 0;
obj_angle = 0;
fire_index = 0;
accel = false;
// Upgrade Variables
upgrade = 1;
shootspeed = ship_shootspeedV1;
shootdamage = ship_shootdamageV1;
ship_accel = ship_accelV1;
//event_inherited();
max_speed = speed;
lowest_dist = 100000;
highest_dist = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shooting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ship_upgrade == 2)
{
    upgrade = 2;
    sprite_index = Sp_ShipV2;
    shootspeed = ship_shootspeedV2;
    shootdamage = ship_shootdamageV2;
    ship_accel = ship_accelV2;
}
if (global.ship_upgrade == 3)
{
    upgrade = 3;
    sprite_index = Sp_ShipV3;
    shootspeed = ship_shootspeedV3;
    shootdamage = ship_shootdamageV3;
    ship_accel = ship_accelV3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(vk_space) &amp;&amp; shooting == false)
{
    O_Self = collision_point(x, y, O_Ship, false, false);
    Sc_Shoot(O_Laser, O_Self);
    audio_play_sound(A_Shoot, 10, false);
}
if (global.ship_health &lt;= 0)
{
    instance_create(x, y, O_Explosion);
    instance_destroy();
}
if (instance_exists(O_Planet_Parent))
{
    dist = Sc_Distance(self, O_Planet_Parent);
    if (dist &lt; lowest_dist)
    {
        lowest_dist = dist;
    }
    if (dist &gt; highest_dist)
    {
        highest_dist = dist;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="O_Gravity">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.Type == -1)
{
    if (other.collided == false)
    {
        event_inherited();
        global.ship_health -= 1 * other.speed;
        sound_play(A_Collision_Asteroid);
        other.collided = true;
        other.set_alarm = true;
    }
}
///Needs some adjustment
/*
// Bounce off of asteroid
with(other)
{
    dist_x = self.x - other.x;
    dist_y = self.y - other.y;
    dist2 = sqr(dist_x * dist_x + dist_y * dist_y);
    
    acceleration_x = dist_x / dist2;
    acceleration_y = dist_y / dist2;
    acceleration2 = point_distance(0, 0, acceleration_x, acceleration_y);
    pdir2 = point_direction(0, 0, acceleration_x, acceleration_y);
}
with(O_Gravity)
{
    if(instance_exists(O_Ship))
    {
        //pdir = point_direction(other.x, other.y, x, y);
        dist_x = O_Ship.x - x;
        dist_y = O_Ship.y - y;
        dist2 = sqr(dist_x * dist_x + dist_y * dist_y);
    
        acceleration_x = dist_x / dist2;
        acceleration_y = dist_y / dist2;
        acceleration = point_distance(0, 0, acceleration_x, acceleration_y);
        pdir = point_direction(0, 0, acceleration_x, acceleration_y);
    
        force = mass * acceleration;
        motion_add(-pdir, force*100);//other.speed/other.mass*200);
    }
}
with(O_Planet_Parent)
{
    if(instance_exists(O_Ship))
    {
        //pdir = point_direction(other.x, other.y, x, y);
        dist_x = O_Ship.x - x;
        dist_y = O_Ship.y - y;
        dist2 = sqr(dist_x * dist_x + dist_y * dist_y);
    
        acceleration_x = dist_x / dist2;
        acceleration_y = dist_y / dist2;
        acceleration = point_distance(0, 0, acceleration_x, acceleration_y);
        pdir = point_direction(0, 0, acceleration_x, acceleration_y);
    
        force = mass * acceleration;
        motion_add(-pdir, force*100);
    }
}
with(other)
{
    if(instance_exists(O_Ship))
    {
        force = O_Ship.mass * acceleration;
        motion_add(pdir2, force*100);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.fuel &gt; 0) // Check to see if the ship has fuel
{
    image_index = 1;
    accel = true;
    global.fuel -= 0.01;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr_angle -= 2.5;       // Rotate ship
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr_angle += 2.5;       // Rotate ship
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (explode)    // If the object has exploded
{
    instance_create(x,y,O_Explosion);
}
else// if (upgrade == 1)
{
    draw_sprite_ext(sprite_index,image_index,x,y,1,1,spr_angle,c_white,1);
}
/*else if (upgrade == 2)
{
    draw_sprite_ext(sprite_index,image_index,x,y,1,1,spr_angle,c_white,1);
}
else if (upgrade == 3)
{
    draw_sprite_ext(sprite_index,image_index,x,y,1,1,spr_angle,c_white,1);
}*/
if (accel)
{
    fire_index += 0.3;
    if (upgrade == 1)
    {
        draw_sprite_ext(Sp_FireV1,floor(fire_index),x,y,1,1,spr_angle,c_white,1);
    }
    else if (upgrade == 2)
    {
        draw_sprite_ext(Sp_FireV2,floor(fire_index),x,y,1,1,spr_angle,c_white,1);
    }
    else if (upgrade == 3)
    {
        draw_sprite_ext(Sp_FireV3,floor(fire_index),x,y,1,1,spr_angle,c_white,1);
    }
}
// Debug
draw_set_color(c_red);
draw_set_halign(fa_left);
draw_set_valign(fa_left);
draw_set_font(-1);
if (instance_exists(O_Ship))
{
    if (global.debug)
    {
        if (dist &lt; lowest_dist)
        {
            lowest_dist = dist;
        }
        if (dist &gt; highest_dist)
        {
            highest_dist = dist;
        }
        //draw_set_alpha(0.5);
        //draw_rectangle(x - sprite_width, y - sprite_height, x + sprite_width, y + sprite_height, false);
        draw_set_alpha(1);
        draw_text(x-50,y+50,
            //"Dist_x: " + string(dist_x) + 
            //"#Dist_y: " + string(dist_y) + 
            "Dist: " + string(dist) + 
            "#Angle: " + string(angle_object) + 
            //"#OrbitV: " + string(orbitalV) +
            //"#F: " + string(force_gravity) +
            "#L Dist: " + string(lowest_dist) + 
            "#H Dist: " + string(highest_dist)
            //"#ID: " + string(id) +
            //"#Shoot: " + string(spr_angle)
            );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="85">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.debug)
{
    if (global.ship_upgrade == 3)
    {
        global.ship_upgrade = 1;
        sprite_index = Sp_ShipV1;
        shootspeed = ship_shootspeedV1;
        shootdamage = ship_shootdamageV1;
        ship_accel = ship_accelV1;
    }
    else if (global.ship_upgrade == 1)
    {
        global.ship_upgrade = 2;
        sprite_index = Sp_ShipV2;
        shootspeed = ship_shootspeedV2;
        shootdamage = ship_shootdamageV2;
        ship_accel = ship_accelV2;
    }
    else if (global.ship_upgrade == 2)
    {
        global.ship_upgrade = 3;
        sprite_index = Sp_ShipV3;
        shootspeed = ship_shootspeedV3;
        shootdamage = ship_shootdamageV3;
        ship_accel = ship_accelV3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>accel = false;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
