<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>deactivate = false;
// Inventory
inv_slots_full = false;
inv_full[2*total_resource_types + craftable_items] = false;
filled_slots = 0;
// Smelting
smelt_num = 0;
smelt_type = -1;
smelting = false;
input_num = 0;
in_type = -1;
processed_time = 0;
num_completed = 0;
total = 0;
draw_map = false;
tutorial_text = 0;
tutorial_complete = false;
falsh_timer_initial = 0.5;
flash_timer = falsh_timer_initial;
num_flash_initial = 5;
num_flashes = num_flash_initial;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivate)
{
    if (input_num &gt; 0)
    {
        if (smelt_num &lt; 50)
        {  
            if (processed_time &gt;= global.smelt_time[in_type]*room_speed)
            {
                smelt_num += 1;
                smelt_type = in_type + total_resource_types;
                input_num -= 1;
                processed_time = 0;
                if (in_type == 3 || in_type == 4 || in_type == 8)
                {
                    score += smelt_stone_points;
                }
                else if (in_type &gt;= 0 &amp;&amp; in_type &lt;= 2)
                {
                    score += smelt_metal_points;
                }
                else if (in_type &gt;= 5 &amp;&amp; in_type &lt;= 7)
                {
                    score += smelt_precious_metal_points;
                }
            }
            smelting = true;
            processed_time += 1;
        }
        else
        {
            smelting = false;
            processed_time = 0;
        }
    }
    else
    {
        smelting = false;
        in_type = -1;
        processed_time = 0;
    }
    if (global.fuel &lt;= 0)
    {
        smelting = false;
    }
    // If smelting use fuel
    if (smelting)
    {
        global.fuel -= .0025;
    }
    // if mouse slot is less than 0 reset type
    if (global.mouse_slot &lt;= 0)
    {
        global.mouse_slot = 0;
        global.mouse_type = -1;
    }
    // Debug mode key combination: control + alt + numpad 0
    if (keyboard_check(vk_control) &amp;&amp; keyboard_check(vk_alt) &amp;&amp; keyboard_check(vk_numpad0))
    {
        global.debug = true;
    }
    // Give inventory items if debug mode is on.
    if (global.debug)
    {
        // Toggle Command Line: ~
        if (keyboard_check_pressed(192))
        {
            if (room == R_Main)
            {
                room = R_Command;
            }
            else
            {
                room = R_Main;
            }
        }
        if (room == R_Tutorial_Inventory)
        {
            // Copper
            if (keyboard_check(ord("1")))
            {
                if (O_Tutorial.inv_full[0] == false)
                {
                    global.Inventory[0] += 1;
                    filled_slots = Sc_Inventory_Assign();
                }
            }
            // Iron
            if (keyboard_check(ord("2")))
            {
                if (O_Tutorial.inv_full[1] == false)
                {
                    global.Inventory[1] += 1;
                    filled_slots = Sc_Inventory_Assign();
                }
            }
            // Nickel
            if (keyboard_check(ord("3")))
            {
                if (O_Tutorial.inv_full[2] == false)
                {
                    global.Inventory[2] += 1;
                    filled_slots = Sc_Inventory_Assign();
                }
            }
            // Stone
            if (keyboard_check(ord("4")))
            {
                if (O_Tutorial.inv_full[3] == false)
                {
                    global.Inventory[3] += 1;
                    filled_slots = Sc_Inventory_Assign();
                }
            }
            // Ice
            if (keyboard_check(ord("5")))
            {
                if (O_Tutorial.inv_full[4] == false)
                {
                    global.Inventory[4] += 1;
                    Sc_Inventory_Assign();
                }
            }
            // Gold
            if (keyboard_check(ord("6")))
            {
                if (O_Tutorial.inv_full[3] == false)
                {
                    global.Inventory[5] += 1;
                    Sc_Inventory_Assign();
                }
            }
            // Platinum
            if (keyboard_check(ord("7")))
            {
                if (O_Tutorial.inv_full[3] == false)
                {
                    global.Inventory[6] += 1;
                    Sc_Inventory_Assign();
                }
            }
            // Titanium
            if (keyboard_check(ord("8")))
            {
                if (O_Tutorial.inv_full[3] == false)
                {
                    global.Inventory[7] += 1;
                    Sc_Inventory_Assign();
                }
            }
            // Coal
            if (keyboard_check(ord("9")))
            {
                if (O_Tutorial.inv_full[3] == false)
                {
                    global.Inventory[8] += 1;
                    Sc_Inventory_Assign();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == R_Title)
{
    deactivate = true;
}
else
{
    deactivate = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivate)
{
    // Draw the item being held by the mouse
    draw_set_color(inventory_text_color);
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
    if (room == R_Tutorial || room == R_Tutorial_Inventory)
    {
        if (global.mouse_type &gt;= 0)
        {
            draw_text(mouse_x - 8, mouse_y - 8, global.mouse_slot);
        }
        switch(global.mouse_type)
        {
            case copper:
                draw_sprite(Sp_Particle_Copper, 0, mouse_x + 16, mouse_y + 16);
                break;
            case iron:
                draw_sprite(Sp_Particle_Iron, 0, mouse_x + 16, mouse_y + 16);
                break;
            case nickel:
                draw_sprite(Sp_Particle_Nickel, 0, mouse_x + 16, mouse_y + 16);
                break;
            case stone:
                draw_sprite(Sp_Particle_Stone, 0, mouse_x + 16, mouse_y + 16);
                break;
            case ice:
                draw_sprite(Sp_Particle_Ice, 0, mouse_x + 16, mouse_y + 16);
                break;
            case gold:
                draw_sprite(Sp_Particle_Gold, 0, mouse_x + 16, mouse_y + 16);
                break;
            case platinum:
                draw_sprite(Sp_Particle_Platinum, 0, mouse_x + 16, mouse_y + 16);
                break;
            case titanium:
                draw_sprite(Sp_Particle_Titanium, 0, mouse_x + 16, mouse_y + 16);
                break;
            case coal:
                draw_sprite(Sp_Particle_Coal, 0, mouse_x + 16, mouse_y + 16);
                break;
            case copper + total_resource_types:
                draw_sprite(Sp_Refined_Copper, 0, mouse_x + 16, mouse_y + 16);
                break;
            case iron + total_resource_types:
                draw_sprite(Sp_Refined_Iron, 0, mouse_x + 16, mouse_y + 16);
                break;
            case nickel + total_resource_types:
                draw_sprite(Sp_Refined_Nickel, 0, mouse_x + 16, mouse_y + 16);
                break;
            case stone + total_resource_types:
                draw_sprite(Sp_Refined_Stone, 0, mouse_x + 16, mouse_y + 16);
                break;
            case ice + total_resource_types:
                draw_sprite(Sp_Refined_Ice, 0, mouse_x + 16, mouse_y + 16);
                break;
            case gold + total_resource_types:
                draw_sprite(Sp_Refined_Gold, 0, mouse_x + 16, mouse_y + 16);
                break;
            case platinum + total_resource_types:
                draw_sprite(Sp_Refined_Platinum, 0, mouse_x + 16, mouse_y + 16);
                break;
            case titanium + total_resource_types:
                draw_sprite(Sp_Refined_Titanium, 0, mouse_x + 16, mouse_y + 16);
                break;
            case copper_wire + 2*total_resource_types:
                draw_sprite(Sp_Copper_Wire, 0, mouse_x + 16, mouse_y + 16);
                break;
            case gold_wire + 2*total_resource_types:
                draw_sprite(Sp_Gold_Wire, 0, mouse_x + 16, mouse_y + 16);
                break;
            case collector_claw + 2*total_resource_types:
                draw_sprite(Sp_Collector_Claw, 0, mouse_x + 16, mouse_y + 16);
                break;
            case mining_drill + 2*total_resource_types:
                draw_sprite(Sp_Mining_Drill, 0, mouse_x + 16, mouse_y + 16);
                break;
            case crucible + 2*total_resource_types:
                draw_sprite(Sp_Crucible, 0, mouse_x + 16, mouse_y + 16);
                break;
            case coolant_cell + 2*total_resource_types:
                draw_sprite(Sp_Coolant_Cell, 0, mouse_x + 16, mouse_y + 16);
                break;
            case collector_droid + 2*total_resource_types:
                draw_sprite(Sp_Droid_Collector, 0, mouse_x + 16, mouse_y + 16);
                break;
            case miner_droid + 2*total_resource_types:
                draw_sprite(Sp_Droid_Miner, 0, mouse_x + 16, mouse_y + 16);
                break;
            case smelter_droid + 2*total_resource_types:
                draw_sprite(Sp_Droid_Smelter, 0, mouse_x + 16, mouse_y + 16);
                break;
            case shipV2_wings + 2*total_resource_types:
                draw_sprite(Sp_ShipV2_Wings, 0, mouse_x + 16, mouse_y + 16);
                break;
            case shipV2_body + 2*total_resource_types:
                draw_sprite(Sp_ShipV2_Body, 0, mouse_x + 16, mouse_y + 16);
                break;
            case shipV2_thruster + 2*total_resource_types:
                draw_sprite(Sp_ShipV2_Thruster, 0, mouse_x + 16, mouse_y + 16);
                break;
            case shipV3_wings + 2*total_resource_types:
                draw_sprite(Sp_ShipV3_Wings, 0, mouse_x + 16, mouse_y + 16);
                break;
            case shipV3_body + 2*total_resource_types:
                draw_sprite(Sp_ShipV3_Body, 0, mouse_x + 16, mouse_y + 16);
                break;
            case shipV3_thruster + 2*total_resource_types:
                draw_sprite(Sp_ShipV3_Thruster, 0, mouse_x + 16, mouse_y + 16);
                break;
        }
        Sc_Tutorial(view_xview[0], view_yview[0]);
    }
    // Debug
    if (room != R_Tutorial &amp;&amp; global.debug)
    {
        draw_set_color(c_red);
        draw_set_halign(fa_left);
        draw_set_valign(fa_left);
        draw_sprite(sprite_index, 0, x, y);
        draw_text(view_xview[0] + 10, view_yview[0] + 10, 
            "Smelting: " + string(smelting) +
            "#Time: " + string(processed_time/60) +
            "#Mouse X: " + string(mouse_x) + 
            "#Mouse Y: " + string(mouse_y) +
            "#Filled Slots: " + string(filled_slots) +
            "#Inventory Full: " + string(inv_slots_full) +
            "#FPS: " + string(fps));
        draw_text(mouse_x - 16, mouse_y - 16, string(global.mouse_type));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="96">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivate)
{
    global.debug = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivate)
{
    if (draw_map)
    {
        draw_map = false;
    }
    else
    {
        draw_map = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivate)
{
    if (room != R_Title)
    {
        if (room != R_Tutorial_Inventory)
        {
            if (room != R_Command)
            {
                room = R_Tutorial_Inventory;
            }
        }
        else
        {
            room = R_Tutorial;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivate)
{
    cursor_sprite = Sp_Empty;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deactivate)
{
    if (room != R_Title)
    {
        if (room == R_Tutorial)
        {
            screen_save("Pause.png");
            global.B_Pause = background_add("Pause.png", false, true)
            room_set_background(R_Tutorial_Pause, 1, true, false, global.B_Pause, 0, 0, false, false, 0, 0, 1);
            cursor_sprite = Sp_Cursor;
            room = R_Tutorial_Pause;
        }
        else if (room == R_Tutorial_Pause)
        {
            cursor_sprite = Sp_Cursor;
            room = R_Tutorial;
        }
        else if (room == R_Command)
        {
            cursor_sprite = Sp_Cursor;
            room = R_Tutorial_Pause;
        }
        else
        {
            cursor_sprite = Sp_Cursor;
            room = R_Tutorial_Pause;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
