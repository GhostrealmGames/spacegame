<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sp_Tutorial_Target_lg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass = 1000; // Set to ships mass
image_speed = 0;
wait_time = 5;
time = wait_time;
destroy_timer = 1;
inner_radius = O_Tutorial_Main.inner_radius;
outer_radius = O_Tutorial_Main.outer_radius;

nearest = instance_nearest(x, y, O_Planet_Parent);
if(!instance_exists(nearest))
{
    do {
        dist = sprite_get_width(Sp_ShipV1)/2 + random_range(inner_radius, outer_radius);
        dir = random(360);
    } until (collision_circle(x+lengthdir_x(dist, dir), y+lengthdir_y(dist, dir), sprite_get_width(Sp_ShipV1), O_Ship, true, true) == noone)
    x = 960 + lengthdir_x(dist, dir);
    y = 640 + lengthdir_y(dist, dir);
}

// Gravity Object Create Event
spawn_delay = 2 * room_speed;
gravityon = true;
rVel = 0;
rDir = 0;
rVel_x = 0;
rVel_y = 0;
collided = false;
// restitution = e
// e = 0 inelastic collision - no energy is converted to motion
// 0 &lt; e &lt; 1 inelastic collision - some energy is converted to motion
// e = 1 elastic collision - all energy is converted to motion
restitution = 1;

if (instance_exists(nearest))
{
    orbitalV = Sc_OrbitalVelocity(self, nearest, false);
}
lowest_dist = 100000;
highest_dist = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dist = Sc_Distance(O_Ship, self);
image_index = 0;

//Gravity
nearest = instance_nearest(x, y, O_Planet_Parent);
if (instance_exists(nearest) &amp;&amp; gravityon)
{
    Sc_Gravity(self, nearest);
}

if (collision_circle(x, y, sprite_width/2 - O_Ship.sprite_width/2, O_Ship, true, true))
{
    image_index = 1;
    time -= 1/room_speed;
}
else
{
    time = wait_time;
}
if (time &lt;= 0)
{
    image_index = 2;
}
if (destroy_timer &lt; 0)
{
    if(!instance_exists(nearest))
    {
        do {
            dist = sprite_get_width(Sp_ShipV1)/2 + random_range(inner_radius, outer_radius);
            dir = random(360);
        } until (collision_circle(960+lengthdir_x(dist, dir), 640+lengthdir_y(dist, dir), sprite_get_width(Sp_ShipV1), O_Ship, true, true) == noone)
        x = 960 + lengthdir_x(dist, dir);
        y = 640 + lengthdir_y(dist, dir);
    }
    else
    {
        planet_x = nearest.x;
        planet_y = nearest.y;
        do {
            dist = sprite_get_width(Sp_Planet_Water)/2 + random_range(nearest.inner_radius, nearest.outer_radius);
            dir = random(360);
        } until (collision_circle(planet_x+lengthdir_x(dist, dir), planet_y+lengthdir_y(dist, dir), sprite_get_width(Sp_ShipV1), O_Ship, true, true) == noone)
        x = planet_x + lengthdir_x(dist, dir);
        y = planet_y + lengthdir_y(dist, dir);
        hspeed = nearest.hspeed;
        vspeed = nearest.vspeed;
        orbitalV = Sc_OrbitalVelocity(self, nearest, false);
    }
    time = wait_time;
    destroy_timer = 1;
    O_Tutorial.num_completed += 1;
    if (sprite_index == Sp_Tutorial_Target_lg)
    {
        sprite_index = Sp_Tutorial_Target_med;
    }
    else if (sprite_index == Sp_Tutorial_Target_med)
    {
        sprite_index = Sp_Tutorial_Target_sm;
    }
    else
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(O_Ship))
{
    if (O_Tutorial.fuel &gt; 0) // Check to see if the ship has fuel
    {
        motion_add(O_Ship.spr_angle + 180, O_Ship.ship_accel);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index, image_index, x, y);
draw_set_font(fnt_update);
draw_set_color(c_red);
draw_set_halign(fa_center);
if (time &lt; 0)
{
    draw_text(x, y - sprite_width/2 - 50, "0");
    destroy_timer -= 1/room_speed;
}
else
{
    draw_text(x, y - sprite_width/2 - 50, round(time));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
