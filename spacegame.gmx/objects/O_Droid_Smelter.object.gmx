<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sp_Droid_Smelter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>O_Droid_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mine_time = 0;
mine_number = 0;
mass = 50;
attached = false;
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(target))
{
    if (target.mine_number &gt; 0)
    {
        switch (resource_type)
        {
            case copper:
                res = instance_create(x, y, O_Refined_Copper);
                break;
            case iron:
                res = instance_create(x, y, O_Refined_Iron);
                break;
            case nickel:
                res = instance_create(x, y, O_Refined_Nickel);
                break;
            case stone:
                res = instance_create(x, y, O_Refined_Stone);
                break;
            case ice:
                res = instance_create(x, y, O_Refined_Ice);
                break;
            case gold:
                res = instance_create(x, y, O_Refined_Gold);
                break
            case platinum:
                res = instance_create(x, y, O_Refined_Platinum);
                break;
            case titanium:
                res = instance_create(x, y, O_Refined_Titanium);
                break;
            case coal:
                res = instance_create(x, y, O_Particle_Coal);
                break;
        }
        res.direction = spr_angle + random_range(-5, 5);
        res.speed = self.speed + random(2);
        target.mine_number -= 1;
        if (target.mine_number &lt;= 0)
        {
            with(target)
            {
                instance_destroy();
                attached = false;
            }
            locked_on = false;
        }
    }
}
attached = true;
mine_time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set the object to chase
if (locked_on == false &amp;&amp; instance_exists(O_Target))
{
    target = instance_nearest(x, y, O_Target);
    droid = self;
    with (target)
    {
        other.target = droid_target;
        instance_destroy();
    }
    locked_on = true;
}
// Step towards Target Object
if (target != noone &amp;&amp; instance_exists(target))
{
    dist = point_distance(x, y, target.x, target.y);
    if (dist &gt; target.sprite_width/2 + 10 || !collision_circle(x, y, sprite_width/2 + 2, O_Asteroid, true, true))
    {
        if (dist &lt; target.sprite_width/2 + 100)
        {
            move_towards_point(target.x, target.y, accel_rate/2);
            spr_angle = point_direction(x, y, target.x, target.y) + 180;
        }
        else
        {
            mp_potential_step(target.x, target.y, accel_rate, true);
            spr_angle = point_direction(x, y, target.x, target.y);
        }
        fire_speed += 0.1;
        accel = true;
        attached = true;
    }
    else
    {
        if (speed != target.speed)
        {
            if (direction != target.direction)
            {
                speed = target.speed;
                direction = target.direction;
                spr_angle = point_direction(x, y, target.x, target.y) + 180;
                accel = false;
            }
        }
    }
}
else
{   
    if (instance_exists(O_Ship))
    {
        dist = point_distance(x, y, O_Ship.x, O_Ship.y);
        if (dist &gt; 200)
        {
            mp_potential_step(O_Ship.x, O_Ship.y, accel_rate, true);
            fire_speed += 0.1;
            accel = true;
        }
        else
        {
            collected_num = 0;
            accel = false;
            speed = 0;
        }
        spr_angle = point_direction(x, y, O_Ship.x, O_Ship.y);
    }
    locked_on = false;
}
imagespeed += 1;

// If the robot has landed on an Asteroid
if (attached)
{
    if (random(1) &lt;= 1/5)
    {
        o_Precious_Metal = round(random_range(gold,titanium));
        resource_type = o_Precious_Metal;
    }
    else if (random(1) &lt;= 1/3)
    {
        o_Metal=round(random_range(copper, nickel));
        resource_type = o_Metal
    }
    else
    {
        o_Coal = random(1)
        if (o_Coal &lt;= 1/2)
        {
            resource_type = coal;
        }
        else
        {
            resource_type = stone;
        }
    }
    mine_time = (miner_timeV3 + global.smelt_time[resource_type])*room_speed;
    alarm[0] = mine_time;
    attached = false;
}
if (mine_time &gt; 0)
{
    mine_time -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (collected_num &gt; 0)
{
    if (O_Controller.inv_full == false)
    {
        collected_num = 0;
        for (i = 0; i &lt; 2*total_resource_types; i += 1)
        {
            if (O_Controller.inv_full == false)
            {
                global.Inventory[i] += Inventory[i];
            }
        }
        global.Inventory[smelter_droid + 2*total_resource_types] += 1;
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (alarm[0] != -1 &amp;&amp; accel == false)
{
    draw_sprite_ext(Sp_Mining_Drill,0,x,y,1,1,spr_angle+270,c_white,1);
}
if (global.debug)
{
    draw_text(x, y,
        "Mine Time: " + string(mine_time) +
        "#Mine Num: " + string(mine_number));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
