<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sp_Inv_Slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>O_Inv_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>snum = 0;
num_resources = 0;
resource_type = -1;
image_index = 0;
image_speed = 0;
draw_item_name = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
draw_item_name = false;
depth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 1;
draw_item_name = true;
depth = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (O_Tutorial.mouse_type &gt;= 0)
{
    O_Tutorial.Inventory[O_Tutorial.mouse_type] += 1;
    O_Tutorial.mouse_slot -= 1;
    if (O_Tutorial.mouse_slot == 0)
    {
        O_Tutorial.mouse_type = -1;
    }
}
else
{
    if (resource_type &gt;= 0 &amp;&amp; resource_type &lt; 2*total_resource_types + craftable_items)
    {
        if (resource_type == 8)
        {
            if (O_Tutorial.fuel &lt;= 95)
            {
                if (keyboard_check(vk_shift))
                {
                    while (O_Tutorial.fuel &lt;= 95 &amp;&amp; O_Tutorial.Inventory[resource_type] &gt;= 0)
                    {
                        O_Tutorial.fuel += 5;
                        O_Tutorial.Inventory[resource_type] -= 1;
                    }
                }
                else
                {
                    O_Tutorial.fuel += 5;
                    O_Tutorial.Inventory[resource_type] -= 1;
                }
            }
        }
        else if (resource_type == repair_pack+2*total_resource_types)
        {
            if (O_Tutorial.ship_health &lt;= 95)
            {
                if (keyboard_check(vk_shift))
                {
                    while (O_Tutorial.ship_health &lt;= 95 &amp;&amp; O_Tutorial.Inventory[resource_type] &gt;= 0)
                    {
                        O_Tutorial.ship_health += 5;
                        O_Tutorial.Inventory[resource_type] -= 1;
                    }
                }
                else
                {
                    O_Tutorial.ship_health += 5;
                    O_Tutorial.Inventory[resource_type] -= 1;
                }
            }
        }
        else
        {
            if (keyboard_check(vk_shift))
            {
                if (resource_type &gt; 2*total_resource_types + craftable_items || O_Tutorial.in_type &gt;= 0)
                {
                    // Do nothing
                }
                else if (resource_type == (O_Tutorial.smelt_type - total_resource_types) || O_Tutorial.smelt_type == -1)
                {
                    O_Tutorial.input_num = round(num_resources/2 + 0.1);
                    O_Tutorial.in_type = resource_type;
                    O_Tutorial.Inventory[resource_type] -= round(num_resources/2 + 0.1);
                }
            }
            else
            {
                O_Tutorial.mouse_slot = round(num_resources/2 + 0.1);
                O_Tutorial.mouse_type = resource_type;
                O_Tutorial.Inventory[resource_type] -= round(num_resources/2 + 0.1);
            }
        }
    }
}
Sc_Inventory_Assign();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (O_Tutorial.mouse_type &gt;= 0 &amp;&amp; num_resources &gt; 0 &amp;&amp; O_Tutorial.inv_slots_full &amp;&amp; O_Tutorial.mouse_type != resource_type)
{
    temp_num = O_Tutorial.mouse_slot;
    temp_type = O_Tutorial.mouse_type;
    O_Tutorial.mouse_slot = num_resources;
    O_Tutorial.mouse_type = resource_type;
    O_Tutorial.Inventory[resource_type] -= num_resources;
    O_Tutorial.Inventory[temp_type] += temp_num;
}
else if (O_Tutorial.mouse_type &gt;= 0)
{
    if (O_Tutorial.inv_slots_full)
    {
        if (!O_Tutorial.inv_full[O_Tutorial.mouse_type])
        {
            if ((O_Tutorial.Inventory[O_Tutorial.mouse_type] + O_Tutorial.mouse_slot) mod stack_size &lt;= stack_size) //stack_size = 50
            {
                O_Tutorial.Inventory[O_Tutorial.mouse_type] += O_Tutorial.mouse_slot;
                O_Tutorial.mouse_slot -= stack_size-(O_Tutorial.Inventory[O_Tutorial.mouse_type] mod stack_size);
            }
        }
    }
    else
    {
        O_Tutorial.Inventory[O_Tutorial.mouse_type] += O_Tutorial.mouse_slot;
        O_Tutorial.mouse_slot = 0;
        O_Tutorial.mouse_type = -1;
    }
}
else
{
    if (resource_type &gt;= 0)
    {
        if (resource_type == 8)
        {
            if (O_Tutorial.fuel &lt;= 95)
            {
                if (keyboard_check(vk_shift))
                {
                    while (O_Tutorial.fuel &lt;= 95 &amp;&amp; O_Tutorial.Inventory[resource_type] &gt;= 0)
                    {
                        O_Tutorial.fuel += 5;
                        O_Tutorial.Inventory[resource_type] -= 1;
                    }
                }
                else
                {
                    O_Tutorial.fuel += 5;
                    O_Tutorial.Inventory[resource_type] -= 1;
                }
            }
        }
        else if (resource_type == repair_pack+2*total_resource_types)
        {
            if (O_Tutorial.ship_health &lt;= 90)
            {
                if (keyboard_check(vk_shift))
                {
                    while (O_Tutorial.ship_health &lt;= 90 &amp;&amp; O_Tutorial.Inventory[resource_type] &gt;= 0)
                    {
                        O_Tutorial.ship_health += 10;
                        O_Tutorial.Inventory[resource_type] -= 1;
                    }
                }
                else
                {
                    O_Tutorial.ship_health += 10;
                    O_Tutorial.Inventory[resource_type] -= 1;
                }
            }
        }
        else
        {
            if (keyboard_check(vk_shift))
            {
                if (resource_type &gt; total_resource_types || (O_Tutorial.in_type != resource_type &amp;&amp; O_Tutorial.in_type != -1))
                {
                    // Do nothing
                }
                else if (resource_type == (O_Tutorial.smelt_type - total_resource_types) || O_Tutorial.smelt_type == -1)
                {
                    O_Tutorial.input_num = num_resources + O_Tutorial.input_num;
                    O_Tutorial.in_type = resource_type;
                    O_Tutorial.Inventory[resource_type] -= num_resources;
                }
            }
            else
            {
                O_Tutorial.mouse_slot = num_resources;
                O_Tutorial.mouse_type = resource_type;
                O_Tutorial.Inventory[resource_type] -= num_resources; 
            }
        }
    }
}
Sc_Inventory_Assign();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(Sp_Inv_Slot, image_index, x, y);
draw_set_color(inventory_text_color);
draw_set_halign(fa_left);
draw_set_valign(fa_left);
switch (resource_type)
{
    case -1:
        break;
    case 0:
        draw_sprite(Sp_Particle_Copper, 0, x, y);
        item_name = "Copper Ore";
        break;
    case 1:
        draw_sprite(Sp_Particle_Iron, 0, x, y);
        item_name = "Iron Ore";
        break;
    case 2:
        draw_sprite(Sp_Particle_Nickel, 0, x, y);
        item_name = "Nickel Ore";
        break;
    case 3:
        draw_sprite(Sp_Particle_Stone, 0, x, y);
        item_name = "Stone";
        break;
    case 4:
        draw_sprite(Sp_Particle_Ice, 0, x, y);
        item_name = "Ice";
        break;
    case 5:
        draw_sprite(Sp_Particle_Gold, 0, x, y);
        item_name = "Gold Ore";
        break;
    case 6:
        draw_sprite(Sp_Particle_Platinum, 0, x, y);
        item_name = "Platinum Ore";
        break;
    case 7:
        draw_sprite(Sp_Particle_Titanium, 0, x, y);
        item_name = "Titanium Ore";
        break;
    case 8:
        draw_sprite(Sp_Particle_Coal, 0, x, y);
        item_name = "Coal";
        item_name += "#Click to refuel";
        break;
    case 0 + total_resource_types:
        draw_sprite(Sp_Refined_Copper, 0, x, y);
        item_name = "Refined Copper";
        break;
    case 1 + total_resource_types:
        draw_sprite(Sp_Refined_Iron, 0, x, y);
        item_name = "Refined Iron";
        break;
    case 2 + total_resource_types:
        draw_sprite(Sp_Refined_Nickel, 0, x, y);
        item_name = "Refined Nickel";
        break;
    case 3 + total_resource_types:
        draw_sprite(Sp_Refined_Stone, 0, x, y);
        item_name = "Refined Stone";
        break;
    case 4 + total_resource_types:
        draw_sprite(Sp_Refined_Ice, 0, x, y);
        item_name = "Water";
        break;
    case 5 + total_resource_types:
        draw_sprite(Sp_Refined_Gold, 0, x, y);
        item_name = "Refined Gold";
        break;
    case 6 + total_resource_types:
        draw_sprite(Sp_Refined_Platinum, 0, x, y);
        item_name = "Refined Platinum";
        break;
    case 7 + total_resource_types:
        draw_sprite(Sp_Refined_Titanium, 0, x, y);
        item_name = "Refined Titanium";
        break;
    case repair_pack + 2*total_resource_types:
        draw_sprite(Sp_Repair_Pack, 0, x, y);
        item_name = "Repair Pack";
        item_name += "#Click to repair";
        break;
    case copper_wire + 2*total_resource_types:
        draw_sprite(Sp_Copper_Wire, 0, x, y);
        item_name = "Copper Wire";
        break;
    case gold_wire + 2*total_resource_types:
        draw_sprite(Sp_Gold_Wire, 0, x, y);
        item_name = "Gold Wire";
        break;
    case collector_claw + 2*total_resource_types:
        draw_sprite(Sp_Collector_Claw, 0, x, y);
        item_name = "Collector Claw";
        break;
    case mining_drill + 2*total_resource_types:
        draw_sprite(Sp_Mining_Drill, 0, x, y);
        item_name = "Mining Drill";
        break;
    case crucible + 2*total_resource_types:
        draw_sprite(Sp_Crucible, 0, x, y);
        item_name = "Collector Droid";
        break;
    case coolant_cell + 2*total_resource_types:
        draw_sprite(Sp_Coolant_Cell, 0, x, y);
        item_name = "Coolant Cell";
        break;
    case collector_droid + 2*total_resource_types:
        draw_sprite(Sp_Droid_Collector, 0, x, y);
        item_name = "Collector Droid";
        break;
    case miner_droid + 2*total_resource_types:
        draw_sprite(Sp_Droid_Miner, 0, x, y);
        item_name = "Miner Droid";
        break;
    case smelter_droid + 2*total_resource_types:
        draw_sprite(Sp_Droid_Smelter, 0, x, y);
        item_name = "Smelter Droid";
        break;
    case shipV2_wings + 2*total_resource_types:
        draw_sprite(Sp_ShipV2_Wings, 0, x, y);
        item_name = "ShipV2 Wing"; 
        break;
    case shipV2_body + 2*total_resource_types:
        draw_sprite(Sp_ShipV2_Body, 0, x, y);
        item_name = "ShipV2 Body"; 
        break;
    case shipV2_thruster + 2*total_resource_types:
        draw_sprite(Sp_ShipV2_Thruster, 0, x, y);
        item_name = "ShipV2 Thruster"; 
        break;
    case shipV3_wings + 2*total_resource_types:
        draw_sprite(Sp_ShipV3_Wings, 0, x, y);
        item_name = "ShipV3 Wing"; 
        break;
    case shipV3_body + 2*total_resource_types:
        draw_sprite(Sp_ShipV3_Body, 0, x, y);
        item_name = "ShipV3 Body"; 
        break;
    case shipV3_thruster + 2*total_resource_types:
        draw_sprite(Sp_ShipV3_Thruster, 0, x, y);
        item_name = "ShipV3 Thruster"; 
        break;
}
if (num_resources &gt; 0)
{
    draw_text(x - 26, y - 26, num_resources);
}
if (resource_type &gt;= 0 &amp;&amp; draw_item_name)
{
    draw_text(mouse_x + 16, mouse_y + 16, string(item_name));
}
if (global.debug)
{
    draw_set_color(c_red);
    draw_text(x - 26, y - 26, 
        "S: " + string(snum) +
        "#T: " + string(resource_type) +
        "#N: " + string(num_resources));
    draw_set_color(c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
