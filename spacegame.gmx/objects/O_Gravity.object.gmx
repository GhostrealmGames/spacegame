<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawn_delay = 2 * room_speed;
gravityon = true;
//alarm[0] = 30;
if (instance_exists(O_Planet_Parent))
{
    nearest = instance_nearest(x, y, O_Planet_Parent);
    orbitalV = Sc_OrbitalVelocity(self, nearest);
}
/*if (nearest.orbitalV &gt; 0)
{
    motion_add(nearest.angle_object + 90, nearest.orbitalV);
}
if (instance_exists(O_Star_Parent))
{
    nearest = instance_nearest(x, y, O_Star_Parent);
    star_orbitalV  = Sc_OrbitalVelocity(self, nearest);
}*/
lowest_dist = 100000;
highest_dist = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(global.debug)
{
    instance_create(x, y, O_Trail);
    alarm[0] = spawn_delay;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gravity
nearest = instance_nearest(x, y, O_Planet_Parent);
if (instance_exists(nearest) &amp;&amp; gravityon)
{
    Sc_Gravity(self, nearest);
}
/*if(nearest.G_force &gt; 0)
{
    motion_add(nearest.angle_object, nearest.G_force);
}
*/
/*nearest = instance_nearest(x, y, O_Star_Parent);
if (instance_exists(nearest))
{
    Sc_Gravity(self, nearest);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="O_Gravity">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision with O_Gravity
with(other)
{
    dist_x = self.x - other.x;
    dist_y = self.y - other.y;
    dist2 = sqr(dist_x * dist_x + dist_y * dist_y);
    
    acceleration_x = dist_x / dist2;
    acceleration_y = dist_y / dist2;
    acceleration = point_distance(0, 0, acceleration_x, acceleration_y);
    pdir2 = point_direction(0, 0, acceleration_x, acceleration_y);
}
//pdir = point_direction(other.x, other.y, x, y);
dist_x = self.x - other.x;
dist_y = self.y - other.y;
dist2 = sqr(dist_x * dist_x + dist_y * dist_y);

acceleration_x = dist_x / dist2;
acceleration_y = dist_y / dist2;
acceleration = point_distance(0, 0, acceleration_x, acceleration_y);
pdir = point_direction(0, 0, acceleration_x, acceleration_y);

force = other.mass * other.acceleration;
motion_add(pdir, force*100);//other.speed/other.mass*200);
with(other)
{
    force = other.mass * other.acceleration;
    motion_add(pdir2, force*100);//other.speed/other.mass*200);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(O_Ship))
{
    if (global.fuel &gt; 0) // Check to see if the ship has fuel
    {
        motion_add(O_Ship.spr_angle + 180, O_Ship.ship_accel);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &gt; view_xview[0] - sprite_width)
{
    if (y &gt; view_yview[0] - sprite_width)
    {
        if (x &lt; view_xview[0] + view_wview[0] + sprite_width)
        {
            if (y &lt; view_yview[0] + view_hview[0] + sprite_width)
            {
                draw_sprite(sprite_index, image_index, x, y);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
