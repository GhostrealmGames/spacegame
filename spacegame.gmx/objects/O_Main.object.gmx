<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_fps = false;
map_size = 20000;
zoom_rate = 1000;
zout_max = 500000;
zin_min = 10000;

//temp
global.Inventory[collector_droid + 2*total_resource_types] += 1;
global.Inventory[miner_droid + 2*total_resource_types] += 1;
global.Inventory[smelter_droid + 2*total_resource_types] += 1;

// Create Border
rnum = 0;
// Top and Bottom
/*for (row = 0; row &lt; room_width; row += O_Border.sprite_width)
{
    instance_create(row,0,O_Border);
    instance_create(row,room_width,O_Border);
}
// Left and Right
for (col = 0; col &lt; room_height; col += O_Border.sprite_height)
{
    instance_create(0,col,O_Border);
    instance_create(room_height,col,O_Border);
}*/
//instance_deactivate_object(O_Border);
// Create Ship
instance_create(1060, 640, O_Ship); // creates a ship in the center of the screen
// Create Planets
instance_create(3000, 3000, O_Planet_Water); //room_height/2
// Create Star
//instance_create(10000, 10000, O_Star_Sun);
/*
with (O_Ship)
{
    //instance_deactivate_region(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false, true);
}
with (O_Asteroid_Parent)
{
    instance_activate_region(x - sprite_width, y - sprite_height, x + sprite_width, y + sprite_height, true);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(map_size &gt; zin_min)
{
    map_size -= zoom_rate;
}
else
{
    map_size = zin_min;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(map_size &lt; zout_max)
{
    map_size += zoom_rate;
}
else
{
    map_size = zout_max;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.mouse_slot &gt; 0)
{
    switch(global.mouse_type)
    {
        case collector_droid + 2*total_resource_types:
            instance_create(mouse_x + 16, mouse_y + 16, O_Droid_Collector);
            global.mouse_slot -= 1;
            break;
        case miner_droid + 2*total_resource_types:
            instance_create(mouse_x + 16, mouse_y + 16, O_Droid_Miner);
            global.mouse_slot -= 1;
            break;
        case smelter_droid + 2*total_resource_types:
            instance_create(mouse_x + 16, mouse_y + 16, O_Droid_Smelter);
            global.mouse_slot -= 1;
            break;
    }
}
if (global.mouse_slot &lt;= 0)
{
    global.mouse_type = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.newgame)
{
    global.newgame = false;
    room_persistent = false;
    room_restart();
    room_goto(R_Newgame);
}
else
{
    room_persistent = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sc_HUD(view_xview[0], view_yview[0], O_Controller);
draw_set_color(c_red);
draw_set_halign(fa_right);
draw_set_valign(fa_top);
if (draw_fps)
{
    draw_text(view_xview[0] + view_wview[0] - 10, view_yview[0], 
        "FPS: " + string(fps) + 
        "#Score: " + string(score) +
        "#Spawn Rate: " + string(((-1/100)*score+initial_spawn_rate))
        );
}
if (global.debug)
{
    draw_set_color(c_red);
    draw_text(mouse_x - 32, mouse_y - 32, string(global.mouse_type));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draw_fps)
{
    draw_fps = false;
}
else
{
    draw_fps = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
