<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>O_Asteroid_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rnum = random(1);
if (rnum &gt; 1/5)
{
    sprite_index = Sp_Asteroid;
    mine_number = round(random_range(10, 20));
    mass = 2000;
    max_damage = 20;
}
else
{
    sprite_index = Sp_Asteroid_1;
    mine_number = round(random_range(8, 16));
    mass = 1500;
    max_damage = 15;
}
targeted = false;
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collided = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="O_Laser">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(damage &gt;= max_damage)
{
    instance_destroy();
    if(!global.offline_mode)
    {
        // Increment Achievement
        gms_ini_player_write("Achievements", "asteroids_destroyed", gms_ini_player_read("Achievements", "asteroids_destroyed") + 1);
        // Check to see if achievement is reached
        asteroids_destroyed = gms_ini_player_read("Achievements", "asteroids_destroyed");
        if(!gms_achievement_isreached("asteroids_10"))
        {
            if(asteroids_destroyed &gt;= 10)
            {
                gms_achievement_reach("asteroids_10");
            }
        }
        else if(!gms_achievement_isreached("asteroids_100"))
        {
            if(asteroids_destroyed &gt;= 100)
            {
                gms_achievement_reach("asteroids_100");
            }
        }
        else if(!gms_achievement_isreached("asteroids_1000"))
        {
            if(asteroids_destroyed &gt;= 1000)
            {
                gms_achievement_reach("asteroids_1000");
            }
        }
        else if(!gms_achievement_isreached("asteroids_10000"))
        {
            if(asteroids_destroyed &gt;= 10000)
            {
                gms_achievement_reach("asteroids_10000");
            }
        }
    }
    
    if (sprite_index == Sp_Asteroid)
    {
        score += medium_asteriod_points;
    }
    else
    {
        score += small_asteroid_points;
    }
    rand = random_range(8,16);
    parallax_dir = O_Parallax.direction;
    parallax_speed = O_Parallax.speed;
    for(i=0;i&lt;=rand;i+=1)
    {
        if (random(1) &lt;= 1/5)
        {
            O_Precious_Metal = random(2);
            if (round(O_Precious_Metal) == 0)
            {
                res = instance_create(x,y,O_Particle_Gold)
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
            else if (round(O_Precious_Metal) == 1)
            {
                res = instance_create(x,y,O_Particle_Platinum)
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
            else if (round(O_Precious_Metal) == 2)
            {
                res = instance_create(x,y,O_Particle_Titanium)
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
        }
        else if (random(1) &lt;= 1/3)
        {
            O_Metal=random(2)
            if(round(O_Metal)=0)
            {
                res = instance_create(x,y,O_Particle_Iron)
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
            else if(round(O_Metal)=1)
            {
                res = instance_create(x,y,O_Particle_Copper);
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
            else if(round(O_Metal)=2)
            {
                res = instance_create(x,y,O_Particle_Nickel);
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
        }
        else
        {
            O_Coal = random(1)
            if (O_Coal &lt;= 1/2)
            {
                res = instance_create(x,y,O_Particle_Coal);
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
            else
            {
                res = instance_create(x,y,O_Particle_Stone);
                with(res)
                {
                    motion_set(other.direction-40+random(80), other.speed + random(3));
                    motion_add(other.parallax_dir+180, other.parallax_speed);
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
