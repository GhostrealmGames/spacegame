<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command = "";
command_first = "";
command_second = "";
max_width = 400;
blink = false;
txt = "";
alarm[0] = room_speed;
old_commands[40] = "";
alpha = 1;
keyboard_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (blink == false)
{
    blink = true;
}
else
{
    blink = false;
}
// Reset
alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (string_width(keyboard_string) &lt; max_width)
{
    txt = keyboard_string;
}
else
{
    keyboard_string = txt;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Input Box
draw_set_alpha(0.5);
draw_set_color(c_gray);
draw_rectangle(0, room_height - 50, room_width, room_height - 25, false);

draw_set_font(fnt_command);
draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
for (i = 0; i &lt; 40; i += 1)
{
    if (string(old_commands[i]) != "0")
    {
        draw_set_alpha(alpha);
        draw_text(10, room_height - 65 - 18*i, old_commands[i]);
        alpha -= 1/40;
    }
}
alpha = 1;
draw_set_alpha(1);

_x = 10;
_y = room_height - 37.5;

if (txt == "")
{
    if (blink == false)
    {
        draw_set_alpha(0.5);
        draw_text(_x, _y, "Enter a Command");
    }
    else
    {
        draw_set_alpha(1);
        draw_text(_x, _y, "|");
        draw_set_alpha(0.5);
        draw_text(_x + 4, _y, "Enter a Command");
    }
    draw_set_alpha(1);
}
else
{
    if (blink == false)
    {
        draw_text(_x, _y, txt);
    }
    else
    {
        draw_text(_x, _y, txt + "|");
    }
}

// Reset Alignment
draw_set_valign(fa_top);
draw_set_font(-1);

draw_set_color(c_red); 
//draw_text(x + 10, y + 10, command);
draw_text(x + room_width - 100, y + 10, command + "#" + command_first + "#" + command_second);
draw_set_color(c_black); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>command = txt;
temp = "";
prev = "";
txt = "";
base_command = "";
max_give = 1000;
keyboard_string = "";
command_first = Sc_String_Decipher(1, " ", command);
command_second = Sc_String_Decipher(2, " ", command);
command_number = Sc_String_Decipher(2, " ", command_second);
command_second = Sc_String_Decipher(1, " ", command_second);
if (command_second == "")
{
    command_first = command;
}
for (i = 39; i &gt;= 0; i -= 1)
{
    if (i == 0)
    {
        old_commands[i] = command;
    }
    else
    {
        old_commands[i] = old_commands[i-1];
    }
}
if (command_first == "/give")
{
    if (command_second == "Copper")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[0] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Iron")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[1] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Nickel")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[2] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Stone")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[3] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Ice")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[4] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Gold")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[5] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Platinum")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[6] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Titanium")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[7] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Coal")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number &lt;= max_give))
        {
            global.Inventory[8] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Refined_Copper")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[0+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Refined_Iron")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[1+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Refined_Nickel")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[2+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Refined_Stone")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[3+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Water" || command_second == "Refined_Ice")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[4+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Refined_Gold")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[5+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Refined_Platinum")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[6+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Refined_Titanium")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[7+total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Fuel")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= 100)
        {
            if (global.fuel &lt;= 100 - real(command_number))
            {
                global.fuel += real(command_number);
            }
            else
            {
                old_commands[0] = "Not enough space for fuel."
            }
        }
        else
        {
            old_commands[0] = "Not enough space for fuel."
        }
    }
    else if (command_second == "Droid_Collector")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[collector_droid+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Droid_Miner")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[miner_droid+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "Droid_Smelter")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[smelter_droid+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV2_Wing")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV2_wings+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV2_Body")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV2_body+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV2_Thruster")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV2_thruster+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV2_Upgrade")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV2+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV3_Wing")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV3_wings+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV3_Body")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV3_body+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV3_Thruster")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV3_thruster+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else if (command_second == "ShipV3_Upgrade")
    {
        if (real(command_number) &gt; 0 &amp;&amp; real(command_number) &lt;= max_give)
        {
            global.Inventory[shipV3+2*total_resource_types] += real(command_number);
        }
        else
        {
            old_commands[0] = "Error: Limit is between 0 and " + string(max_give) + " items";
        }
    }
    else
    {
        old_commands[0] = "'" + command + "' is not a valid command. Check capitilization.";
    }
}
else if (command_first == "/shipV2")
{
    global.ship_upgrade = 2;
}
else if (command_first == "/shipV3")
{
    global.ship_upgrade = 3;
}
else if (command_first == "/godmode")
{
    
}
else if (command_first == "/setscore")
{
    if (real(command_number) &gt; 0)
    {
        score = real(command_number)
    }
}
else if (command_first == "/addscore")
{
    if (real(command_number) &gt; 0)
    {
        score += real(command_number)
    }
}
else if (command_first == "/sethealth")
{
    if (real(command_number) &gt; 0)
    {
        if (real(command_number) &lt;= 100)
        {
            global.ship_health = real(command_number)
        }
        else
        {
            old_commands[0] = "Health cannot be greater than 100";
        }
    }
    else
    {
        old_commands[0] = "Health must be greater than 0";
    }
}
else if (command_first == "/addhealth")
{
    if (real(command_number) &gt; 0)
    {
        if ((real(command_number)+global.ship_health) &lt;= 100)
        {
            global.ship_health += real(command_number)
        }
        else
        {
            old_commands[0] = "Health cannot exceed 100.  Current health: " + string(global.ship_health);
        }
    }
    else
    {
        old_commands[0] = "Health must be greater than 0";
    }
}
else
{
    old_commands[0] = "'" + command + "' is not a valid command";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
