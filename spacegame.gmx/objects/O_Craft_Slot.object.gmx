<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Sp_Inv_Slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>O_Inv_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>snum = 0;
craft_type = -1;
craft_num = 0;
image_index = 0;
image_speed = 0;
req_draw = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
req_draw = false;
depth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 1;
req_draw = true;
depth = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (craft_type != -1)
{
    complete = true;
    if (room == R_Menu_Inventory)
    {
        controller = O_Controller;
    }
    else
    {
        controller = O_Tutorial;
    }
    if (!controller.inv_full[2*total_resource_types + craft_type])
    {
        for (i = 0; i &lt; total_resource_types + craftable_items-1; i += 1)
        {
            if (!(global.Inventory[i + total_resource_types] &gt;= global.Craft[craft_type, i]))
            {
                complete = false;
            }
        }
        if (craft_type == shipV3)
        {
            if (global.ship_upgrade != 2)
            {
                complete = false;
            }
        }
        if (complete)
        {
            for (i = 0; i &lt; total_resource_types + craftable_items-1; i += 1)
            {
                global.Inventory[i + total_resource_types] -= global.Craft[craft_type, i];
            }
            // Upgrade ship if crafted ship upgrade
            if (craft_type == shipV2)
            {
                global.ship_upgrade = 2;
                score += shipV2_upgrade_points;
                if (!gms_achievement_reach("Upgrade to shipV2."))
                {
                    gms_achievement_reach("Upgrade to shipV2.");
                }
            }
            else if (craft_type == shipV3)
            {
                global.ship_upgrade = 3;
                score += shipV3_upgrade_points;
                if (!gms_achievement_reach("Upgrade to shipV3."))
                {
                    gms_achievement_reach("Upgrade to shipV3.");
                }
            }
            else
            {
                global.Inventory[2*total_resource_types + craft_type] += craft_num;
            }
            score += craft_points;
        }
        Sc_Inventory_Assign();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(Sp_Inv_Slot, image_index, x, y);
draw_set_color(inventory_text_color);
draw_set_halign(fa_left);
draw_set_valign(fa_left);
switch (craft_type)
{
    case -1:
        break;
    case repair_pack:
        draw_sprite(Sp_Repair_Pack, 0, x, y);
        item_name = "Repair Pack";
        break;
    case copper_wire:
        draw_sprite(Sp_Copper_Wire, 0, x, y);
        item_name = "Copper Wire";
        break;
    case gold_wire:
        draw_sprite(Sp_Gold_Wire, 0, x, y);
        item_name = "Gold Wire";
        break;
    case collector_claw:
        draw_sprite(Sp_Collector_Claw, 0, x, y);
        item_name = "Collector Claw";
        break;
    case mining_drill:
        draw_sprite(Sp_Mining_Drill, 0, x, y);
        item_name = "Mining Drill";
        break;
    case crucible:
        draw_sprite(Sp_Crucible, 0, x, y);
        item_name = "Crucible";
        break;
    case coolant_cell:
        draw_sprite(Sp_Coolant_Cell, 0, x, y);
        item_name = "Coolant Cell";
        break;
    case collector_droid:
        draw_sprite(Sp_Droid_Collector, 0, x, y);
        item_name = "Collector Droid"; 
        break;
    case miner_droid:
        draw_sprite(Sp_Droid_Miner, 0, x, y);
        item_name = "Miner Droid"; 
        break;
    case smelter_droid:
        draw_sprite(Sp_Droid_Smelter, 0, x, y);
        item_name = "Smelter Droid"; 
        break;
    case shipV2_wings:
        draw_sprite(Sp_ShipV2_Wings, 0, x, y);
        item_name = "ShipV2 Wing"; 
        break;
    case shipV2_body:
        draw_sprite(Sp_ShipV2_Body, 0, x, y);
        item_name = "ShipV2 Body"; 
        break;
    case shipV2_thruster:
        draw_sprite(Sp_ShipV2_Thruster, 0, x, y);
        item_name = "ShipV2 Thruster"; 
        break;
    case shipV2:
        draw_sprite(Sp_ShipV2_Upgrade, 0, x, y);
        item_name = "ShipV2 Upgrade"; 
        break;
    case shipV3_wings:
        draw_sprite(Sp_ShipV3_Wings, 0, x, y);
        item_name = "ShipV3 Wing"; 
        break;
    case shipV3_body:
        draw_sprite(Sp_ShipV3_Body, 0, x, y);
        item_name = "ShipV3 Body"; 
        break;
    case shipV3_thruster:
        draw_sprite(Sp_ShipV3_Thruster, 0, x, y);
        item_name = "ShipV3 Thruster"; 
        break;
    case shipV3:
        draw_sprite(Sp_ShipV3_Upgrade, 0, x, y);
        item_name = "ShipV3 Upgrade"; 
        break;
}
if (craft_type &gt;= 0 &amp;&amp; req_draw)
{
    string_req = "";
    if (global.Craft[craft_type, copper] &gt; 0)
    {
        string_req += "#Copper: " + string(global.Craft[craft_type, copper])
    }
    if (global.Craft[craft_type, iron] &gt; 0)
    {
        string_req += "#Iron: " + string(global.Craft[craft_type, iron])
    }
    if (global.Craft[craft_type, nickel] &gt; 0)
    {
        string_req += "#Nickel: " + string(global.Craft[craft_type, nickel])
    }
    if (global.Craft[craft_type, stone] &gt; 0)
    {
        string_req += "#Refined Stone: " + string(global.Craft[craft_type, stone])
    }
    if (global.Craft[craft_type, ice] &gt; 0)
    {
        string_req += "#Water: " + string(global.Craft[craft_type, ice])
    }
    if (global.Craft[craft_type, gold] &gt; 0)
    {
        string_req += "#Gold: " + string(global.Craft[craft_type, gold])
    }
    if (global.Craft[craft_type, platinum] &gt; 0)
    {
        string_req += "#Platinum: " + string(global.Craft[craft_type, platinum])
    }
    if (global.Craft[craft_type, titanium] &gt; 0)
    {
        string_req += "#Titanium: " + string(global.Craft[craft_type, titanium])
    }
    if (global.Craft[craft_type, coal] &gt; 0)
    {
        string_req += "#Coal: " + string(global.Craft[craft_type, coal])
    }
    if (global.Craft[craft_type, copper_wire + total_resource_types] &gt; 0)
    {
        string_req += "#Copper Wire: " + string(global.Craft[craft_type, copper_wire + total_resource_types])
    }
    if (global.Craft[craft_type, gold_wire + total_resource_types] &gt; 0)
    {
        string_req += "#Gold Wire: " + string(global.Craft[craft_type, gold_wire + total_resource_types])
    }
    if (global.Craft[craft_type, collector_claw + total_resource_types] &gt; 0)
    {
        string_req += "#Collector Claw: " + string(global.Craft[craft_type, collector_claw + total_resource_types])
    }
    if (global.Craft[craft_type, mining_drill + total_resource_types] &gt; 0)
    {
        string_req += "#Mining Drill: " + string(global.Craft[craft_type, mining_drill + total_resource_types])
    }
    if (global.Craft[craft_type, crucible + total_resource_types] &gt; 0)
    {
        string_req += "#Crucible: " + string(global.Craft[craft_type, crucible + total_resource_types])
    }
    if (global.Craft[craft_type, coolant_cell + total_resource_types] &gt; 0)
    {
        string_req += "#Coolant Cell: " + string(global.Craft[craft_type, coolant_cell + total_resource_types])
    }
    if (global.Craft[craft_type, shipV2_wings + total_resource_types] &gt; 0)
    {
        string_req += "#ShipV2 Wing: " + string(global.Craft[craft_type, shipV2_wings + total_resource_types])
    }
    if (global.Craft[craft_type, shipV2_body + total_resource_types] &gt; 0)
    {
        string_req += "#ShipV2 Body: " + string(global.Craft[craft_type, shipV2_body + total_resource_types])
    }
    if (global.Craft[craft_type, shipV2_thruster + total_resource_types] &gt; 0)
    {
        string_req += "#ShipV2 Thruster: " + string(global.Craft[craft_type, shipV2_thruster + total_resource_types])
    }
    if (global.Craft[craft_type, shipV3_wings-1 + total_resource_types] &gt; 0)
    {
        string_req += "#ShipV3 Wing: " + string(global.Craft[craft_type, shipV3_wings + total_resource_types])
    }
    if (global.Craft[craft_type, shipV3_body-1 + total_resource_types] &gt; 0)
    {
        string_req += "#ShipV3 Body: " + string(global.Craft[craft_type, shipV3_body + total_resource_types])
    }
    if (global.Craft[craft_type, shipV3_thruster-1 + total_resource_types] &gt; 0)
    {
        string_req += "#ShipV3 Thruster: " + string(global.Craft[craft_type, shipV3_thruster + total_resource_types])
    }
    draw_text(mouse_x + 16, mouse_y + 16,
        string(item_name) +
        "#Required Items:" +
        string_req);
}
if (craft_num &gt; 0)
{
    draw_text(x - 26, y - 26, craft_num);
}
if (global.debug)
{
    draw_set_color(c_red);
    draw_text(x - 26, y - 26, 
        "S: " + string(snum) +
        "#T: " + string(craft_type) +
        "#N: " + string(craft_num));
    draw_set_color(c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
